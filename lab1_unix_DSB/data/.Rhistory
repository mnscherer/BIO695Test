z%in%y
y%in%z
b <- [z%in%y]
b <- z[z%in%y]
b
b <- y[z%in%y]
b
b <- y[y%in%z]
b
b <- y[z%in%y]
b
#Find the five elements of y that are also elements of z.
z%in%y
b <- z[z%in%y]
b
seq(2, 100, by = 2)==(1:50) *2
#Find the five elements of y that are also elements of z.
z%in%y
b <- z[z%in%y==TRUE]
b
b <- y[z%in%y]
b
#Extract all the elements of z that are divisible by 12. How many elements in z match this criteria.
y <- z[z %% 12==0]
length(y)
#7. Create a vector y that contains all numbers between 0 and 30 that are divisible by 3.
a=c(1:30)
y<- a[a %% 3==0]
#Find the five elements of y that are also elements of z.
z%in%y
b <- y[z%in%y]
b
b <- y[y%in%z]
b
#exercise 1
#Meredith Scherer
#----------------------------------------------
#Create a vector containing all the even numbers between 2 and 100 (inclusive) and store it in the variable z.
z=seq(from =2, to=100, by = 2)
#double check right length
z
#Extract all the elements of z that are divisible by 12. How many elements in z match this criteria.
y <- z[z %% 12==0]
length(y)
#there are 8 elements that match this criteria
#What is the sum of all the elements of z?
x=sum(z)
x
#sum is 2550
#Is the sum of the elements of z equal to 51×50?
x==(51*50)
#answer = yes
#What is the product of elements 5, 10, and 15 of z?
sum(z[c(5, 10, 15)])
#product is 60
#What happens if you type z ^ 2?
z^2
#squares every single number in z
#7. Create a vector y that contains all numbers between 0 and 30 that are divisible by 3.
a=c(1:30)
y<- a[a %% 3==0]
#Find the five elements of y that are also elements of z.
z%in%y
b <- y[y%in%z]
b
#Does seq(2, 100, by = 2) produce the same vector as (1:50) *2?
seq(2, 100, by = 2)==(1:50) *2
#yes
#QUESTION 3
#What is the sum of all the elements of z?
sum(z)
#First we learn a specific command for getting user input:
z <- readline(prompt = "Enter a number: ")
z <- readline(prompt = "Enter a number: ")
# whether the remainder equals 0
# if yes, print even statement
# otherwise, print odd statement
if (z %% 2 == 0) {
print(paste(z, "is even"))
} else {
print(paste(z, "is odd"))
}
z <- readline(prompt = "Enter a number: ")
z <- as.numeric(z)
# whether the remainder equals 0
# if yes, print even statement
# otherwise, print odd statement
if (z %% 2 == 0) {
print(paste(z, "is even"))
} else {
print(paste(z, "is odd"))
}
# specify a path to the script and execute it
source("EvenOrOdd")
# specify a path to the script and execute it
source("EvenOrOdd.csv")
# specify a path to the script and execute it
source("EvenOrOdd.csv")
# specify a path to the script and execute it
source("EvenOrOdd.R")
z <- readline(prompt = "Enter a number: ")
# if z > 100
# if yes, print even statement
# otherwise, print odd statement
if (z > 100) {
print(paste(z**3))
} else if (z %% 17 ==0){
print(paste(sqrt(z)))
}
z <- as.numeric(z)
# if z > 100
# if yes, print even statement
# otherwise, print odd statement
if (z > 100) {
print(paste(z**3))
} else if (z %% 17 ==0){
print(paste(sqrt(z)))
}
z <- readline(prompt = "Enter a number: ")
# if z > 100
# if yes, print even statement
# otherwise, print odd statement
if (z > 100) {
print(paste(z**3))
} else if (z %% 17 ==0){
print(paste(sqrt(z)))
}
z <- readline(prompt = "Enter a number: ")
z <- as.numeric(z)
# if z > 100
# if yes, print even statement
# otherwise, print odd statement
if (z > 100) {
print(paste(z**3))
} else if (z %% 17 ==0){
print(paste(sqrt(z)))
}
z <- readline(prompt = "Enter a positive integer: ")
z <- as.numeric(z)
if (z < 100) {
print(paste(1:z))
} else {
print(paste(z:100))
}
z <- readline(prompt = "Enter a positive integer: ")
z <- as.numeric(z)
if (z < 100) {
print(paste(1:z))
} else {
print(paste(z:100))
}
if (z < 100) {
print(paste(1:z))
} else {
print(paste(z:1))
}
#ex:
myvec <- 1:10
for (i in myvec) {
a <- i ^ 2
print(a)
}
#We can rewrite the previous for loop script as a while loop:
i <- 1
while (i <= 10) {
a <- i ^ 2
print(a)
i <- i + 1
}
#We can rewrite the previous for loop script as a while loop:
i <- 1
while (i <= 10) {
a <- i ^ 2
print(a)
i <- i + 1
}
i <- a
while (i <= 10) {
a <- i ^ 2
print(a)
i <- a
}
#We can rewrite the previous for loop script as a while loop:
i <- 1
while (i <= 10) {
a <- i ^ 2
print(a)
i <- a
}
break
z <- readline(prompt = "Enter a number: ")
# if z > 100
# if yes, print even statement
# otherwise, print odd statement
if (z > 100) {
print(z**3)
} else if (z %% 17 ==0){
print(sqrt(z))
}
z <- as.numeric(z)
# if z > 100
# if yes, print even statement
# otherwise, print odd statement
if (z > 100) {
print(z**3)
} else if (z %% 17 ==0){
print(sqrt(z))
}
z <- readline(prompt = "Enter a number: ")
z <- as.numeric(z)
# if z > 100
# if yes, print even statement
# otherwise, print odd statement
if (z > 100) {
print(z**3)
} else if (z %% 17 ==0){
print(sqrt(z))
}
z <- readline(prompt = "Enter a number: ")
z <- as.numeric(z)
# if z > 100
# if yes, print even statement
# otherwise, print odd statement
if (z > 100) {
print(paste(z**3))
} else if (z %% 17 ==0){
print(paste(sqrt(z)))
}
print(paste(sqrt(z)))
# if z > 100
# if yes, print even statement
# otherwise, print odd statement
if (z > 100) {
print(paste(z**3))
} else if (z %% 17 ==0){
print(paste(sqrt(z)))
}
# if z > 100
# if yes, print even statement
# otherwise, print odd statement
if (z > 100) {
print(paste(z**3))
} else if (z %% 17 ==0){
print(paste(sqrt(z)))
}
z <- readline(prompt = "Enter a positive integer: ")
z <- as.numeric(z)
if (z < 100) {
print(1:z)
} else {
print(z:1)
}
# if z > 100
# if yes, print even statement
# otherwise, print odd statement
if (z > 100) {
print(paste(z**3))
} else if (z %% 17 ==0){
print(paste(sqrt(z)))
}
#1. guess: for number in sequence z, if it is divisible by 4, print it
#code:
z <- seq(1, 1000, by = 3)
for (k in z) {
if (k %% 4 == 0) {
print(k)
}
}
function (prompt = "")
z <- readline(prompt = "Enter a number: ")
z <- readline(prompt = "Enter a number: ")
isthisspecial <- TRUE
i <- 2
while (i < z) {
if (z %% i == 0) {
isthisspecial <- FALSE
break
}
i <- i + 1
}
if (isthisspecial == TRUE) {
print(z)
}
z <- readline(prompt = "Enter a number: ")
z <- as.numeric(z)
isthisspecial <- TRUE
i <- 2
while (i < z) {
if (z %% i == 0) {
isthisspecial <- FALSE
break
}
i <- i + 1
}
if (isthisspecial == TRUE) {
print(z)
}
z <- readline(prompt = "Enter a number: ")
isthisspecial <- TRUE
i <- 2
while (i < z) {
if (z %% i == 0) {
isthisspecial <- FALSE
break
}
i <- i + 1
}
if (isthisspecial == TRUE) {
print(z)
}
z <- readline(prompt = "Enter a number: ")
isthisspecial <- TRUE
i <- 2
while (i < z) {
if (z %% i == 0) {
isthisspecial <- FALSE
break
}
i <- i + 1
}
if (isthisspecial == TRUE) {
print(z)
}
z <- readline(prompt = "Enter a number: ")
z <- as.numeric(z)
isthisspecial <- TRUE
i <- 2
while (i < z) {
if (z %% i == 0) {
isthisspecial <- FALSE
break
}
i <- i + 1
}
if (isthisspecial == TRUE) {
print(z)
}
z <- readline(prompt = "Enter a number: ")
z <- as.numeric(z)
isthisspecial <- TRUE
i <- 2
while (i < z) {
if (z %% i == 0) {
isthisspecial <- FALSE
break
}
i <- i + 1
}
if (isthisspecial == TRUE) {
print(z)
}
#prompt the user to enter a number
z <- readline(prompt = "Enter a number: ")
#make the number numeric
z <- as.numeric(z)
#initialize the variable as TRUE
isthisspecial <- TRUE
#set the variable i to = 2
i <- 2
#start the while loop to compare i to the entered number
while (i < z) {
#if z is divisible by i
if (z %% i == 0) {
#change isthisspecial to false
isthisspecial <- FALSE
#break the script
break
}
#otherwise, increase 1
i <- i + 1
}
#start a new if loop
if (isthisspecial == TRUE) {
print(z)
}
# check whether a number is triangular
# take a single argument, y
is_triangular <- function(y){
n <- (sqrt((8 * y) + 1) - 1) / 2
# if triangular, then n should be an integer
if (as.integer(n) == n) {
# if condition is true, then return TRUE
return(TRUE)
}
# if condition is not true (i.e., n is not a integer), then return FALSE
return(FALSE)
}
is_triangular(10)
source("isTriangular.R")
is_traingular(3)
source("isTriangular.R")
is_traingular(3)
is_triangular(91)
is_triangular(10)
is_triangular(3)
is_triangular(91)
is_triangular(10)
# function to find and store all triangular numbers
# argument is one number (max_number)
# range is from 1 to max_number
find_triangular <- function(max_number){
# create vector with all numbers to be tested
to_test <- 1:max_number
# create empty vector for storage
triangular_numbers <- numeric(0)
# iterate using a for loop
for (i in to_test) {
# call function to test whether number is triangular
if (is_triangular(i)) {
# if is_triangular returns TRUE, add to result vector
triangular_numbers <- c(triangular_numbers, i)
}
}
# when all numbers are tested (i.e., loop exited)
# print results to screen
print(paste("There are", length(triangular_numbers),
"triangular numbers between 1 and ", max_number))
# Output will be the stored vector
return(triangular_numbers)
}
# function to find and store all triangular numbers
# argument is one number (max_number)
# range is from 1 to max_number
find_triangular <- function(max_number){
# create vector with all numbers to be tested
to_test <- 1:max_number
# create empty vector for storage
triangular_numbers <- numeric(0)
# iterate using a for loop
for (i in to_test) {
# call function to test whether number is triangular
if (is_triangular(i)) {
# if is_triangular returns TRUE, add to result vector
triangular_numbers <- c(triangular_numbers, i)
}
}
# when all numbers are tested (i.e., loop exited)
# print results to screen
print(paste("There are", length(triangular_numbers),
"triangular numbers between 1 and ", max_number))
# Output will be the stored vector
return(triangular_numbers)
}
#how many triangular numbers if the max is 1,000
find_triangular(1000)
#Question 1:
#Using the tree data frame and calculate: what’s the average height of the cherry tree?
#get tree data frame
data(trees)
#Question 1:
#Using the tree data frame and calculate: what’s the average height of the cherry tree?
#get tree data frame
data(trees)
#view the dataset
str(trees)
#all are cherry trees therefore find the average of the 2nd column
mean(trees$Girth)
#Question 2:
#What is the average girth of those that are more than 75ft tall?
#subset the vector by getting everything greater than 75, and get the mean by getting Girth column
greater75<-mean(trees[trees$Height>75,"Girth"])
#now get average girth
mean(greater75$Girth)
#now get average girth
mean(greater75)
#Question 3:
#What is the maximum height of trees with a volume between 15 and 35ft^3?
# & is for and, | is for or
max(trees[trees$Volume<35 & trees$Volume>15,])
#Question 4:
#Read in “Gesquiere2011_data.csv”, for male ID equal 3, what’s the maximum GC value, what’s the mean T value?
setwd("~meredithscherer/lab1_unix_DSB/data")
gesquiere<-read.csv("Gesquiere2011_data.csv")
#get the first few lines
head(gesquiere)
#the file does have a header
gesquiere<-read.csv("Gesquiere2011_data.csv", header = TRUE)
#the separator of this file is \t characters
gesquiere<-read.csv("Gesquiere2011_data.csv", sep = '\t')
head(gesquiere) # now it has three columns- good
#for male ID equal 3, what’s the maximum GC value, what’s the mean T value?
#get the male ID=3
male3<-(gesquiere[gesquiere$maleID==3,])
max(male3$GC)
#max male 3 GC value: 499.73
mean(male3$T)
#Question 5:
#How many rows have GC larger than 50, and T larger than 100?
male3$GC>50
#Question 5:
#How many rows have GC larger than 50, and T larger than 100?
male[male3$GC>50]
#Question 5:
#How many rows have GC larger than 50, and T larger than 100?
male3[male3$GC>50]
#Question 5:
#How many rows have GC larger than 50, and T larger than 100?
male3(male3$GC>50)
50
#Question 5:
#How many rows have GC larger than 50, and T larger than 100?
male3$GC>50
#Question 5:
#How many rows have GC larger than 50, and T larger than 100?
greater50<-male3$GC>50
count(greater50==TRUE)
greater50==TRUE
length(greater50[greater50==TRUE]
length(greater50[greater50==TRUE])
length(greater50[greater50==TRUE])
greater100<-male3$T>100
length(greater100[greater100==TRUE])
